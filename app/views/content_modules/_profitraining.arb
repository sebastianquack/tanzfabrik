# here we load the event details joined with events so that we can sort and separate them
def load_profitrainings(year)

  if year
    start_date = Date.parse('01-01-' + year.to_s)
    end_date = start_date.end_of_year
    profitrainings = EventDetail.joins(:event).where('events.type_id = 4 AND start_date >= ? AND start_date <= ?', start_date, end_date).uniq.sort_by{ |e| e.start_date }
  else 
    profitrainings = EventDetail.joins(:event).where('events.type_id = 4 AND end_date >= ?', Date.today).sort_by{ |e| e.start_date }
  end

  return profitrainings

end

def render_list_for(profitrainings) 

  ul :class => "project_list" do
    profitrainings.each do |event_detail| 
      li do
        a :class => "project", :href => event_path(event_detail.event) do 
          
          div :class => "time-duration" do
            span l event_detail.starttime, :format => :day_month
            text_node " - "
            span l event_detail.endtime, :format => :day_month_year
          end

          div :class=>"time" do
            span l event_detail.starttime, :format => :hours_minutes
            text_node " - "
            span l event_detail.starttime + event_detail.duration * 60, :format => :hours_minutes
          end

          div event_detail.event.people.map { |p| p.name }.join(', ').html_safe, :class => "teacher"
          div event_detail.event.title, :class => "title"
          
        end
      end
    end  
  end
  
end

div :class => "module__profitraining" do
  h3 Date.today.year
  profitrainings = load_profitrainings(nil)
  render_list_for(profitrainings)

  # figure out in which years event_details exist
  years = Event.no_draft.joins(:type, :event_details).where('event_types.id = 4').group_by_year(:start_date).count

  # show links for these years
  section :class => "archive-section" do
    h3 t(:past_events), :class => "archive-headline"
    ul :class => "archive-links" do
      years.keys.reverse.each do |y|
        h3 y.year, :class => "year"
        profitrainings = load_profitrainings(y.year)
        render_list_for(profitrainings)
      end
    end
  end
end




##trainings = Event.of_types([4]).sort_by { |t| t.event_details.first.start_date }
##sorted_trainings = trainings.sort_by { |t| t.event_details.first.start_date }#

#cache_arbre(self, cache_key_for_profitraining) do#

#  trainings_details = EventDetail.includes([{:event => {:people => :events }}, :repeat_mode])
#    .where("end_date >= ?", Date.today)
#    .order("Date(start_date)")
#    .all.select{ |d| !d.event.draft && d.valid? && d.event.type_id == 4 }#

#  details_by_week = trainings_details.group_by { |d| d.start_date.beginning_of_week }#

#  ul :class => "timetable" do
#    details_by_week.each do |beginning_of_week, details|
#      ul :class => "week" do
#        li do
#          div :class => "header" do
#            time (l beginning_of_week, :format => :short) + '-' + (l beginning_of_week + 4.day, :format => :short), :class => "time-week"
#          end
#          ul do
#            occurrences = details.collect_concat { |d| d.occurrences }
#            5.times do |wday|
#              oc = occurrences.select { |oc| oc.wday == wday+1 }.first
#              li do 
#                time (l (beginning_of_week+wday.days), :format => :long_day), :class => ( oc ? "day" : "day holiday")
#                if oc
#                  details.each do |detail|
#                    training = detail.event
#                    next if detail.start_date > beginning_of_week # skip some
#                    div :class => "event" do
#                      h4 :class => "title" + (training.people.second ? " one-line" : "") do 
#                        a training.title, :href => event_path(training) if training.title
#                      end
#                      div :class => "teacher" do
#                        a training.people.sort.first.name, :href => person_link(training.people.sort.first)
#                      end
#                      if training.people.second
#                        div :class => "teacher" do
#                          a training.people.sort.second.name, :href => person_link(training.people.sort.second)
#                        end                    
#                      end
#                      div :class => "time" do
#                        # assuming all occurrences within one week have same start time and duration
#                        time (l detail.starttime, :format => :hours_minutes), :class => "course-time"
#                        span "-"
#                        time (l detail.endtime_clock, :format => :hours_minutes), :class => "course-time"
#                      end
#                      #div :class => "description" do
#                      #  para training.description.html_safe if training.description
#                      #end
#                    end
#                  end
#                else 
#                  div :class => "event empty-event" do
#                    div t :holiday, :class => "holiday"
#                  end
#                end
#              end    
#            end
#          end
#        end
#      end
#    end
#  end
#end