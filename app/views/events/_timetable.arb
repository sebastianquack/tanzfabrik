# pass week into timetable as local
# if variable not present, use start of current week
# pass events
# pass location
## require 'benchmark'

unless defined? start_date
  start_date = Date.today.beginning_of_week # gets current monday
end

# create array of dates to look at
dates = [start_date]
4.times do |i|
  dates.push (dates[i] + 1.day)
end

# create a big array of all the events details TODO: optimize
#details = []
#events.each do |e|
#    details += e.event_details.select{ |ed| ed.valid? && ed.studio.location == location }
#end

# do all the calculations
table_data = []
tags = []

# first row
table_data[0] = []
table_data[0][0] = ""
dates.each_with_index do |date, index|
  table_data[0][index + 1] = l date, :format=>:weekday_short
end

row_index = 1

# go through event details per hour
details_by_hour = 
  EventDetail.includes( :event, {:event => [{:people => :events }, :type, :person_events]}, :repeat_mode, :tags, {:studio => :location} )
  .all.select { |ed| !ed.event.draft && ed.valid? && ed.studio.location == location && type_ids.include?(ed.event.type_id)  }
  .sort_by { |detail| [detail.time.strftime('1%H%M').to_i, detail.start_date, detail.event.title] }
  .group_by { |detail| detail.time.hour }
  .sort_by { |hour,detail| hour}


  #.all(:include => :event, :conditions => {:events => {:type_id => type_ids }} )

#bench = Benchmark.measure do

  details_by_hour.each do |hour, details|

    # go through dates = columns
    dates.each_with_index do |date, column_index|
      
      unless table_data[row_index]
        table_data[row_index] = [] # initialize row if that hasen't happened yet
      end          
      unless table_data[row_index][column_index + 1]
        table_data[row_index][column_index + 1] = [] # initialize a column if that hasen't happened yet
      end    

      #check if a detail has an occurrence during the upcoming weeks
      upcoming_weeks = 12
      details.each do |detail|
        if detail.start_date.wday == date.wday
          # fast code
          if detail.extend_empty_end_date.end_date >= Date.today && detail.start_date <= (Date.today + upcoming_weeks.week)
            table_data[row_index][column_index + 1].push(detail)
            tags += detail.tags
          # slow code for events that happen between now and upcoming_weeks
          elsif detail.start_date >= Date.today
            logger.debug("UPCOMING " + detail.event.title + detail.event.type_id.to_s)
            upcoming_weeks.times do |i|
              if detail.extend_empty_end_date.occurs_on?(date + i.week)
                table_data[row_index][column_index + 1].push(detail)
                tags += detail.tags
                break
              end
            end
          end
        end
      end  

    end

    # only if there was an occurrence in this row, add time to first column
    if table_data[row_index]
      #table_data[row_index][0]  = div details.first.studio.location.name, :class => "location-name"
      #table_data[row_index][0] += div details.first.studio.name, :class => "studio-name"
      if !table_data[row_index].all? { |el| el == nil || el == [] }
        table_data[row_index][0] = div t("time.from") + " " + hour.to_s + ":00"
        row_index += 1
      end
    end
  end

#end
#logger.debug bench

table_data[0][0] = div(location.name, :class => "location-name")

#pre table_data.to_yaml

# jump out when empty
if table_data.length <= 2
  logger.debug "short table data"
  logger.debug table_data

  if table_data[1] == nil || table_data[1][0] == nil
    return
  end

end


# display the table
div :class => "timetable-container" do
  table :class => "timetable" do
      
    # table head
    thead do  
      tr :class => "row-studio" do
        th
        th :class => "studio", :colspan => table_data[0].length-1 do
          h2 table_data[0][0]
        end
      end
      tr :class => "row-days" do
        table_data[0].each_with_index do |header, i|
          th do
            div header, :class => "day" if i != 0
          end
        end
      end      
    end

  
    # table body
    tbody do  
      table_data.shift
      #table_data.sort! { |a,b| a[0].to_s <=> b[0].to_s }
      table_data.each do |row|
        # find maximum number of entries for a table cell in this row
        largest = 0
        row.each_with_index do |data, index|
          largest = data.length if index > 0 && data.length > largest
        end
        
        if largest == 0 # catch weird error where empty row is in data
          next 
        end 

        tr do          
          # output cells          
          row.each_with_index do |data,index|
            if index == 0 
              th do
                div data, :class => (data == "" ? "" : "time")
              end
            else
              td do
                largest.times do |detail_index|
                  if !data[detail_index]
                    article :class => "event empty-event"
                  else
                    detail = data[detail_index]
                    article :class => "event", :id => "_"+detail.event.id.to_s do
                      
                      # time and tag
                      div :class => "time-footnotes" do
                        # 12:00-13:00
                        time l(detail.starttime, :format => :hours_minutes), :class => "course-time"
                        text_node "-"
                        time l(detail.endtime_clock, :format => :hours_minutes), :class => "course-time"
                        
                        # (offen)
                        span "(" + detail.tags.map { |t| t.short }.join('/') + ")", :class=>"footnote" if detail.tags.length > 0
                      end

                      # warning
                      div :class => "warning" do
                        #if detail.event.signup_url && detail.event.warning
                          #a detail.event.warning.html_safe, :href => detail.event.signup_url 
                        #else 
                          text_node detail.event.warning.html_safe if detail.event.warning
                        #end
                      end

                      # title
                      if detail.event.type_id == 5 # performance-projekt -> link to event page
                        div :class => "title-description" do
                          h6 :class => "title" do
                            a detail.event.title.html_safe, :href => event_path(detail.event) if detail.event.title
                          end
                        end
                      else 
                        div :class => "title-description open-close", "data-open-close-group" => "timetable" do
                          h6 :class => "title close-others" + (detail.event.description ? " open-trigger" : "") do
                            a detail.event.title.html_safe, :href =>event_path(detail.event) if detail.event.title
                          end
                        end
                      end

                      
                      # teacher 1
                      div :class => "teacher" do
                        detail.event.people_sorted[0].name.html_safe if detail.event.people_sorted[0]
                      end

                      # teacher 2
                      div :class => "teacher" do
                        detail.event.people_sorted[1].name.html_safe if detail.event.people_sorted[1]
                      end

                      # studio
                      div :class => "studio" do
                        text_node detail.studio.location.name + " " + detail.studio.name if detail.studio
                      end
                      


                    end          
                  end
                end
              end      
            end    
          end
        end
      end
    end
  end
  dl :class => "tags" do
    tags.uniq.sort_by { |t| [t.priority, t.abbr] } .each do |tag|
      span :class => "tag" do
        dt "(" + tag.short + ")"
        dd tag.name
      end
    end
  end
end

