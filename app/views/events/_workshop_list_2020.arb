# local variable workshops


workshops.group_by{|w| w.start_date.month}.each do |group| 

  unless defined? in_festival 
    h3 l(group[1].first.start_date, :format => :month), :class => "month"
  end

  ul :class => "project_list" do

      group[1].each do |event|
    
        li do
          a :class => "project", :href => event_path_with_festival(event, in_festival) do 

            time :class => "date" do

              # code to group event details into sequences of connected days, for example: sept 1, sept 9-10, oct 12, 

              occurrences = []
              event.event_details.each do |ed|
                occurrences.concat ed.occurrences
              end
              
              sequences = [[nil, nil]]
              sequenceIndex = 0
              previous_oc = nil
              
              occurrences.sort.each_with_index do |oc, index|
                if !sequences[sequenceIndex][0] # if current sequence has no start date, set it
                  sequences[sequenceIndex][0] = oc
                else
                  if oc.yday == previous_oc.yday + 1 # if this day follows the previous
                    sequences[sequenceIndex][1] = oc # save this as potential end of sequence
                  else
                    sequences.push [oc, nil] # otherwise start a new sequence with this oc
                    sequenceIndex += 1
                  end 
                end
                previous_oc = oc
              end

              #span sequences.inspect

              sequences.each do |s|
                if s[1]
                  span l(s[0], :format => :day_month) + " â€“ " + l(s[1], :format => :day_month)
                else 
                  span l(s[0], :format => :day_month)
                end
              end
            
            end
            
            div event.people.map { |p| p.name }.join(', ').html_safe, :class => "teacher"

            # hide festival reference in festival program
            div :class => "festival-title" do
              unless defined? in_festival 
                div :class => "festival" do
                  render :partial => "events/in_festival", :locals => {:event => event, :link => false }
                end
              end
              div event.title, :class => "title"
            end
            
          end
        end
      end  
    end
  end


































#if params[:year]
#  start_date = Date.parse('01-01-' + params[:year])
#  end_date = start_date.end_of_year
#  workshops = Event.joins(:type, :event_details).where('event_types.id = 2 AND event_details.start_date >= ? AND event_details.start_date <= ?', start_date, end_date).uniq
#else 
  #start_date = Date.today.beginning_of_month
#  start_date = Date.parse('01-01-' + Time.now.year.to_s) # get workshops from beginning of year
#  end_date = Time.now.to_s # don't show workshops that ended before today
#  workshops = Event.joins(:type, :event_details).where('event_types.id = 2 AND event_details.start_date >= ? AND event_details.end_date >= ?', start_date, end_date).uniq
#end

# get all workshops
#all_workshops = Event.where(:type_id => 2)

#div :class => "module__workshop_programm" do #

#  render :partial => "/events/workshop_list", :locals => {:in_festival => nil}  #

#  # figure out in which years event_details exist
#  years = Event.no_draft.joins(:type, :event_details).where('event_types.id = 2').where("start_date < '"+(Date.today.year+1).to_s+"-01-01'" ).group_by_year(:start_date).count#

#  # show links for these years
#  section :class => "archive-section" do
#    h5 t(:past_workshops), :class => "archive-headline"
#    ul :class => "archive-links" do
#      years.keys.each do |y|
#        if y.year <= Time.now.year
#          li do
#            a y.year.to_s, :href => (url_for :controller => 'pages', :action => 'show', :id => 'workshop_programm', :year => y.year.to_s)
#          end
#        end
#      end
#    end
#  end#

#end